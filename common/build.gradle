architectury {
    //Enable it if we need ExpectPlatform
    common(rootProject.enabled_platforms.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/bendylib.accesswidener")
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

    modImplementation("maven.modrinth:3dskinlayers:1.5.2-fabric-1.19")
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java

            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if(!(dep.artifactId.last().value().last() in ["fabric-loader"])) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (System.getenv("MAVEN_PASS") != null) {
            maven {
                url = 'https://maven.kosmx.dev/'
                credentials {
                    username = project.keys.maven_user
                    password = project.keys.kosmx_maven
                }
            }
        } else {
            mavenLocal()
        }


        if(System.getenv("GITHUB_ACTOR") != null) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/kosmx/bendy-lib"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}
